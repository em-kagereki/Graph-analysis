con = connect, header = TRUE, periodic_commit = 50,
as = "row", on_load = disease_anatomy)
gene_anatomy <- 'merge (n1:Anatomy {name: row.Anatomy, identifier: row.Anatomy_ID})
merge (n2:Gene {name: row.Gene, identifier: row.Gene_ID})
merge (n1)-[r:Anatomy_Gene {type: row.Relation}]-> (n2);'
load_csv(url = "file:///gene_anatomy.csv",
con = connect, header = TRUE, periodic_commit = 50,
as = "row", on_load = gene_anatomy)
gene_bioprocess <- 'merge (n1:Gene {name: row.Gene, identifier: row.Gene_ID})
merge (n2:BiologicalProcess {name: row.BiologicalProcess, identifier: row.BiologicalProcess_ID})
merge (n1)-[r:Gene_BiologicalProcess {type: row.Relation}]-> (n2);'
load_csv(url = "file:///gene_bioprocess.csv",
con = connect, header = TRUE, periodic_commit = 50,
as = "row", on_load = gene_bioprocess)
gene_pathway <- 'merge (n1:Gene {name: row.Gene, identifier: row.Gene_ID})
merge (n2:Pathway {name: row.Pathway, identifier: row.Pathway_ID})
merge (n1)-[r:Gene_Pathway {type: row.Relation}]-> (n2);'
load_csv(url = "file:///gene_pathway.csv",
con = connect, header = TRUE, periodic_commit = 50,
as = "row", on_load = gene_pathway)
## Graph statistics
## Total connections:
nNodes <-'match (n:Nodes) return count(n);' %>%
call_neo4j(connect)
nNodes <-nNodes$`count(n)`[[1]] # Extract the element from the tibble!!!
## Total genes:
nGenes<-'match (n:Gene) return count(n)' %>%
call_neo4j(connect)
nGenes <-nGenes$`count(n)`[[1]]
## Count Pathway nodes:
nPathway<-'match (n:Pathway) return count(n)' %>%
call_neo4j(connect)
nPathway <-nPathway$`count(n)`[[1]]
## Total number of relations:
nRelationships<-'match (:Nodes)-[r]-(:Nodes)
return count(r)' %>%
call_neo4j(connect)
nRelationships <-nRelationships$`count(r)`[[1]]
## Total number of relations between Genes and Diseases:
gRd<-'match (:Gene)-[r]-(:Disease)
return count(r)' %>%
call_neo4j(connect)
gRd <-gRd$`count(r)`[[1]]
## Total number of relations between Compounds and Diseases:
cRd<-'match (:Compound)-[r]-(:Disease)
return count(r)' %>%
call_neo4j(connect)
cRd <-cRd$`count(r)`[[1]]
## Total number of relations between Disease and Anatomy:
dRa<-'match (:Disease)-[r]-(:Anatomy)
return count(r)' %>%
call_neo4j(connect)
dRa <-dRa$`count(r)`[[1]]
## Total number of relations between Anatomy and Gene:
aRg<-'match (:Anatomy)-[r]-(:Gene)
return count(r)' %>%
call_neo4j(connect)
aRg <-aRg$`count(r)`[[1]]
## Total number of relations between Gene and BiologicalProcess:
gRb<-'match (:Gene)-[r]-(:BiologicalProcess)
return count(r)' %>%
call_neo4j(connect)
gRb <-gRb$`count(r)`[[1]]
## Total number of relations between Gene and Pathway:
gRp<-'match (:Gene)-[r]-(:Pathway)
return count(r)' %>%
call_neo4j(connect)
gRp <-gRp$`count(r)`[[1]]
centrality<-"call gds.degree.stream({
nodeProjection: 'Nodes',
relationshipProjection: ['Compound_Gene', 'Compound_SideEffect', 'Gene_Pathway']
})
YIELD nodeId, score
return gds.util.asNode(nodeId).name AS name, score
order by score desc"
call_neo4j(centrality,connect)
centrality<-call_neo4j(centrality,connect)
centrality$score
data<-cbind(centrality$name,centrality$score)
data
head(data)
centrality<-"call gds.degree.stream({
nodeProjection: 'Hetionet_Nodes',
relationshipProjection: ['Compound_Gene', 'Compound_SideEffect', 'Gene_Pathway']
})
YIELD nodeId, score
return gds.util.asNode(nodeId).name AS name, score
order by score desc"
centrality<-call_neo4j(centrality,connect)
data2<-cbind(centrality$name,centrality$score)
head(data2)
centrality<-"call gds.degree.stream({
nodeProjection: 'Nodes',
relationshipProjection: ['Compound_Gene', 'Compound_SideEffect', 'Gene_Pathway']
})
YIELD nodeId, score
return gds.util.asNode(nodeId).name AS name, score
order by score desc"
centrality<-call_neo4j(centrality,connect)
data2<-cbind(centrality$name,centrality$score)
head(data2)
centrality<-"call gds.degree.stream({
nodeProjection: 'Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene', 'Anatomy_Gene', 'Gene_BiologicalProcess', 'Gene_Pathway', 'Compound_Disease']
})
YIELD nodeId, score
return gds.util.asNode(nodeId).name AS name, score
order by score desc"
centrality<-call_neo4j(centrality,connect)
data2<-cbind(centrality$name,centrality$score)
head(data2)
centrality<-"call gds.degree.stream({
nodeProjection: 'Nodes',
relationshipProjection: ['Compound_Gene', 'Compound_SideEffect', 'Gene_Pathway','Compound_Disease']
})
YIELD nodeId, score
return gds.util.asNode(nodeId).name AS name, score
order by score desc"
centrality<-call_neo4j(centrality,connect)
data2<-cbind(centrality$name,centrality$score)
head(data2)
centrality<-"call gds.degree.stream({
nodeProjection: 'Nodes',
relationshipProjection: ['Compound_Gene', 'Compound_SideEffect', 'Gene_Pathway']
})
YIELD nodeId, score
return gds.util.asNode(nodeId).name AS name, score
order by score desc"
centrality<-call_neo4j(centrality,connect)
data2<-cbind(centrality$name,centrality$score)
head(data2)
nNodes <-'match (n:Hetionet_Nodes) return count(n);' %>%
call_neo4j(connect)
nNodes <-nNodes$`count(n)`[[1]] # Extract the element from the tibble!!!
nNodes
nNodes <-'match (n:Nodes) return count(n);' %>%
call_neo4j(connect)
nNodes <-nNodes$`count(n)`[[1]] # Extract the element from the tibble!!!
nNodes
'CALL db.schema.visualization YIELD nodes, relationships'
"call gds.degree.stream({
nodeProjection: 'Hetionet_Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene','Anatomy_Gene','Gene_BiologicalProcess','Gene_Pathway']
})
YIELD nodeId, score
return gds.util.asNode(nodeId).name AS name, gds.util.asNode(nodeId).type AS nodeType ,score
order by score desc limit 100"
"call gds.degree.stream({
nodeProjection: 'Hetionet_Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene','Anatomy_Gene','Gene_BiologicalProcess','Gene_Pathway']
})"
Tt<-"call gds.degree.stream({
nodeProjection: 'Hetionet_Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene','Anatomy_Gene','Gene_BiologicalProcess','Gene_Pathway']
})
YIELD nodeId, score
return gds.util.asNode(nodeId).name AS name, gds.util.asNode(nodeId).type AS nodeType ,score
order by score desc limit 100"
centrality<-call_neo4j(Tt,connect)
centrality
Tt<-"call gds.degree.stream({
nodeProjection: 'Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene','Anatomy_Gene','Gene_BiologicalProcess','Gene_Pathway']
})
YIELD nodeId, score
return gds.util.asNode(nodeId).name AS name, gds.util.asNode(nodeId).type AS nodeType ,score
order by score desc limit 100"
centrality<-call_neo4j(Tt,connect)
centrality
Tt<-"call gds.degree.stream({
nodeProjection: 'Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene','Anatomy_Gene','Gene_BiologicalProcess','Gene_Pathway']
})
order by score desc limit 100"
centrality<-call_neo4j(Tt,connect)
centrality
d<-'CALL db.schema.visualization YIELD nodes, relationships'
call_neo4j(d,connect)
centrality<-"call gds.degree.stream({
nodeProjection: 'Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene','Anatomy_Gene','Gene_BiologicalProcess','Gene_Pathway']
})
YIELD nodeId, score
return gds.util.asNode(nodeId).name AS name, score
order by score desc"
centrality<-call_neo4j(centrality,connect)
data<-cbind(centrality$name,centrality$score)
head(data)
bet<-"call gds.betweenness.stream({
nodeProjection: 'Hetionet_Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene', 'Anatomy_Gene', 'Gene_BiologicalProcess', 'Gene_Pathway', 'Compound_Disease']
})
YIELD nodeId, score
return gds.util.asNode(nodeId).name AS name, gds.util.asNode(nodeId).type AS nodeType ,score
order by score desc limit 100;"
between<-call_neo4j(bet,connect)
between
bet<-"call gds.betweenness.stream({
nodeProjection: 'Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene', 'Anatomy_Gene', 'Gene_BiologicalProcess', 'Gene_Pathway', 'Compound_Disease']
})
YIELD nodeId, score
return gds.util.asNode(nodeId).name AS name, gds.util.asNode(nodeId).type AS nodeType ,score
order by score desc limit 100;"
between<-call_neo4j(bet,connect)
between
bet<-"call gds.betweenness.stream({
nodeProjection: 'Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene', 'Anatomy_Gene', 'Gene_BiologicalProcess', 'Gene_Pathway']
})
YIELD nodeId, score
return gds.util.asNode(nodeId).name AS name, gds.util.asNode(nodeId).type AS nodeType ,score
order by score desc limit 100;"
between<-call_neo4j(bet,connect)
between
bet<-"call gds.betweenness.stream({
nodeProjection: 'Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene', 'Anatomy_Gene', 'Gene_BiologicalProcess', 'Gene_Pathway']
})
YIELD nodeId, score
return gds.util.asNode(nodeId).name AS name, gds.util.asNode(nodeId).type AS nodeType ,score
order by score desc limit 100;"
between<-call_neo4j(bet,connect)
between<-cbind(between$name,between$score)
between
close<-"call gds.alpha.closeness.stream({
nodeProjection: 'Hetionet_Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene', 'Anatomy_Gene', 'Gene_BiologicalProcess', 'Gene_Pathway', 'Compound_Disease']
})
YIELD nodeId, centrality
return gds.util.asNode(nodeId).name AS name, gds.util.asNode(nodeId).type AS nodeType, centrality
order by centrality desc limit 100"
closeness<-call_neo4j(close,connect)
closeness<-cbind(closeness$name,closeness$score)
closeness
close<-"call gds.alpha.closeness.stream({
nodeProjection: 'Hetionet_Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene', 'Anatomy_Gene', 'Gene_BiologicalProcess', 'Gene_Pathway']
})
YIELD nodeId, centrality
return gds.util.asNode(nodeId).name AS name, gds.util.asNode(nodeId).type AS nodeType, centrality
order by centrality desc limit 100"
closeness<-call_neo4j(close,connect)
closeness<-cbind(closeness$name,closeness$score)
closeness
close<-"call gds.alpha.closeness.stream({
nodeProjection: 'Hetionet_Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene', 'Anatomy_Gene', 'Gene_BiologicalProcess', 'Gene_Pathway']
})
YIELD nodeId, centrality
return gds.util.asNode(nodeId).name AS name, gds.util.asNode(nodeId).type AS nodeType, centrality
order by centrality desc limit 100"
closeness<-call_neo4j(close,connect)
closeness
close<-"call gds.alpha.closeness.stream({
nodeProjection: 'Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene', 'Anatomy_Gene', 'Gene_BiologicalProcess', 'Gene_Pathway']
})
YIELD nodeId, centrality
return gds.util.asNode(nodeId).name AS name, gds.util.asNode(nodeId).type AS nodeType, centrality
order by centrality desc limit 100"
closeness<-call_neo4j(close,connect)
closeness<-cbind(closeness$name,closeness$score)
closeness
close<-"call gds.alpha.closeness.stream({
nodeProjection: 'Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene', 'Anatomy_Gene', 'Gene_BiologicalProcess', 'Gene_Pathway']
})
YIELD nodeId, centrality
return gds.util.asNode(nodeId).name AS name, gds.util.asNode(nodeId).type AS nodeType, centrality
order by centrality desc limit 100"
closeness<-call_neo4j(close,connect)
closeness
clo<-cbind(closeness$name,closeness$score)
clo<-cbind(closeness$name,closeness$centrality)
clo
common<-'MATCH (n1:Disease)
MATCH (n2:Compound)
WHERE NOT (n2)--(n1)
RETURN n1.name, n2.name, gds.alpha.linkprediction.commonNeighbors(n1, n2) AS commonNeighbors_score
order by commonNeighbors_score desc
limit 100;'
common<-call_neo4j(common,connect)
common
common<-cbind(common$n1.name,common$n2.name,common$commonNeighbors_score)
common
close<-"call gds.alpha.closeness.stream({
nodeProjection: 'Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene', 'Anatomy_Gene', 'Gene_BiologicalProcess', 'Gene_Pathway']
})
YIELD nodeId, centrality
return gds.util.asNode(nodeId).name AS name, gds.util.asNode(nodeId).type AS nodeType, centrality;"
closeness<-call_neo4j(close,connect)
closeness<-cbind(closeness$name,closeness$centrality)
closeness
common2<-'MATCH (n1:Disease)
MATCH (n2:BiologicalProcess)
RETURN n1.name, n2.name, gds.alpha.linkprediction.commonNeighbors(n1, n2) AS commonNeighbors_score
order by commonNeighbors_score desc
limit 100;'
common2<-call_neo4j(common2,connect)
common2<-cbind(common2$n1.name,common2$n2.name,common2$commonNeighbors_score)
common2
common2<-'MATCH (n1:Disease)
MATCH (n2:BiologicalProcess)
RETURN n1.name, n2.name, gds.alpha.linkprediction.commonNeighbors(n1, n2) AS commonNeighbors_score
order by commonNeighbors_score desc;'
common2<-call_neo4j(common2,connect)
common2<-cbind(common2$n1.name,common2$n2.name,common2$commonNeighbors_score)
common3<-'MATCH (n1:Disease)
MATCH (n2:Compound)
WHERE NOT (n2)--(n1)
RETURN n1.name, n2.name, gds.alpha.linkprediction.adamicAdar(n1, n2) AS AdamicAdar_Score
order by AdamicAdar_Score desc
limit 100'
common3<-call_neo4j(common3,connect)
common3<-cbind(common3$n1.name,common3$n2.name,common3$commonNeighbors_score)
common3
common3<-cbind(common3$n1.name,common3$n2.name,common3$AdamicAdar_Score)
common3
common4<-'MATCH (n1:Disease)
MATCH (n2:Pathway)
RETURN n1.name, n2.name, gds.alpha.linkprediction.adamicAdar(n1, n2) AS AdamicAdar_Score
order by AdamicAdar_Score desc
limit 100'
common4<-call_neo4j(common4,connect)
common4<-cbind(common4$n1.name,common4$n2.name,common4$AdamicAdar_Score)
common4
jarc<-'with the Disease (hypothesized association)
match (g:Gene)--(:Disease)
with collect(g.name) as GenesAssociatedWithDisease
match (n1:Gene)--(n2:Pathway)
where n1.name in GenesAssociatedWithDisease
with n1, collect(id(n2)) as Pathway1, GenesAssociatedWithDisease
match (n3:Gene)--(n4:Pathway)
where not n3.name in GenesAssociatedWithDisease
with n1, Pathway1, n3, collect(id(n4)) as Pathway2
return n1.name, n3.name, gds.alpha.similarity.jaccard(Pathway1, Pathway2) as similarity
order by similarity desc;'
jarc<-call_neo4j(jarc,connect)
jarc
jarc<-'match (g:Gene)--(:Disease)
with collect(g.name) as GenesAssociatedWithDisease
match (n1:Gene)--(n2:Pathway)
where n1.name in GenesAssociatedWithDisease
with n1, collect(id(n2)) as Pathway1, GenesAssociatedWithDisease
match (n3:Gene)--(n4:Pathway)
where not n3.name in GenesAssociatedWithDisease
with n1, Pathway1, n3, collect(id(n4)) as Pathway2
return n1.name, n3.name, gds.alpha.similarity.jaccard(Pathway1, Pathway2) as similarity
order by similarity desc;'
jarc<-call_neo4j(jarc,connect)
jarc
jarc<-call_neo4j(jarc,connect)
jarc
jarc2<-cbind(jarc2$n1.name,jarc2$n3.name,jarc2$similarity)
jarc<-cbind(jarc$n1.name,jarc$n3.name,jarc$similarity)
head(jarc)
jarc2<-'match (g:Gene)--(:Disease)
with collect(g.name) as GenesAssociatedWithDisease
match (n1:Gene)--(n2:BiologicalProcess)
where n1.name in GenesAssociatedWithDisease
with n1, collect(id(n2)) as BiologicalProcess1, GenesAssociatedWithDisease
match (n3:Gene)--(n4:BiologicalProcess)
where not n3.name in GenesAssociatedWithDisease
with n1, BiologicalProcess1, n3, collect(id(n4)) as BiologicalProcess2
return n1.name, n3.name, gds.alpha.similarity.jaccard(BiologicalProcess1, BiologicalProcess2) as similarity
order by similarity desc;'
jarc2<-call_neo4j(jarc2,connect)
jarc2<-cbind(jarc2$n1.name,jarc2$n3.name,jarc2$similarity)
jarc2<-call_neo4j(jarc2,connect)
gc()
jarc2<-cbind(jarc2$n1.name,jarc2$n3.name,jarc2$similarity)
jarc2<-'match (g:Gene)--(:Disease)
with collect(g.name) as GenesAssociatedWithDisease
match (n1:Gene)--(n2:BiologicalProcess)
where n1.name in GenesAssociatedWithDisease
with n1, collect(id(n2)) as BiologicalProcess1, GenesAssociatedWithDisease
match (n3:Gene)--(n4:BiologicalProcess)
where not n3.name in GenesAssociatedWithDisease
with n1, BiologicalProcess1, n3, collect(id(n4)) as BiologicalProcess2
return n1.name, n3.name, gds.alpha.similarity.jaccard(BiologicalProcess1, BiologicalProcess2) as similarity
order by similarity desc;'
jarc2<-call_neo4j(jarc2,connect)
gc()
gc()
install.packages("rjson")
library("rjson")
json_file <- "C:/Users/Admin/Downloadscc.json"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
library("rjson")
json_file <- "C:/Users/Admin/Downloads/cc.json"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
library("rjson")
json_file <- "C:/Users/Admin/Downloads/cc2.json"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
library("rjson")
json_file <- "C:/Users/Admin/Downloads/cc2.json"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
fp <- file.path("C:/Users/Admin/Downloads/cc3.txt")
json_data <- fromJSON(file = fp)
View(json_data)
json_data[[3]]
json_data[[11]]
json_data[[85]]
json_data[[300]]
class(json_data)
data<-do.call(rbind.data.frame, json_data)
df <- data.frame(matrix(unlist(json_data), nrow=132, byrow=TRUE),stringsAsFactors=FALSE)
df <- data.frame(matrix(unlist(json_data), nrow=3591, byrow=TRUE),stringsAsFactors=FALSE)
View(df)
df <- data.frame(matrix(unlist(json_data), nrow=3591, byrow=FALSE),stringsAsFactors=FALSE)
View(df)
library (plyr)
d <- ldply (json_data, data.frame)
View(d)
df <- data.frame(matrix(unlist(json_data), nrow=3591, byrow=FALSE),stringsAsFactors=FALSE)
View(df)
fp <- file.path("C:/Users/Admin/Downloads/cd.txt")
json_data <- fromJSON(file = fp)
data<-do.call(rbind.data.frame, json_data)
fp <- file.path("C:/Users/Admin/Downloads/cd.txt")
json_data <- fromJSON(file = fp)
fp <- file.path("C:/Users/Admin/Downloads/cc3.txt")
json_data <- fromJSON(file = fp)
data<-do.call(rbind.data.frame, json_data)
fp <- file.path("C:/Users/Admin/Downloads/cd.txt")
json_data <- fromJSON(file = fp)
d <- ldply (json_data, data.frame)
View(d)
fp <- file.path("C:/Users/Admin/Downloads/pizza.txt")
json_data <- fromJSON(file = fp)
d <- ldply (json_data, data.frame)
View(d)
fp <- file.path("C:/Users/Admin/Downloads/cc3.txt")
json_data <- fromJSON(file = fp)
data<-do.call(rbind.data.frame, json_data)
df <- data.frame(matrix(unlist(json_data), nrow=3591, byrow=FALSE),stringsAsFactors=FALSE)
library (plyr)
d <- ldply (json_data, data.frame)
View(d)
View(d)
fp <- file.path("C:/Users/Admin/Downloads/part.txt")
json_data <- fromJSON(file = fp)
data<-do.call(rbind.data.frame, json_data)
d <- ldply (json_data, data.frame)
View(d)
shiny::runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp()
runApp()
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
shiny::runApp('App/Artifacts standardization')
runApp('App/Artifacts standardization')
runApp('App/Artifacts standardization')
runApp('App/Artifacts standardization')
runApp('App/Artifacts standardization')
runApp('App/Artifacts standardization')
setwd("C:/Users/Admin/Documents/KM - Winter 2022/tutorial/B00867154/")
library(xaringanBuilder)
build_pdf(input = "Report.Rmd",
output_file = "Report.pdf",
complex_slides = TRUE,
partial_slides = TRUE)
build_pptx(input = "Report.Rmd",
output_file = "Report.pptx",
complex_slides = TRUE,
partial_slides = TRUE)
library(xaringanBuilder)
build_pdf(input = "Report.Rmd",
output_file = "Report.pdf",
complex_slides = TRUE,
partial_slides = TRUE)
build_pptx(input = "Report.Rmd",
output_file = "Report.pptx",
complex_slides = TRUE,
partial_slides = TRUE)
build_pdf(input = "Report.Rmd",
output_file = "Report.pdf",
complex_slides = TRUE,
partial_slides = TRUE)
