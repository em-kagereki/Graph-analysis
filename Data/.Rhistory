YIELD nodeId, score
return gds.util.asNode(nodeId).name AS name, gds.util.asNode(nodeId).type AS nodeType ,score
order by score desc limit 100"
centrality<-call_neo4j(Tt,connect)
centrality
Tt<-"call gds.degree.stream({
nodeProjection: 'Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene','Anatomy_Gene','Gene_BiologicalProcess','Gene_Pathway']
})
YIELD nodeId, score
return gds.util.asNode(nodeId).name AS name, gds.util.asNode(nodeId).type AS nodeType ,score
order by score desc limit 100"
centrality<-call_neo4j(Tt,connect)
centrality
Tt<-"call gds.degree.stream({
nodeProjection: 'Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene','Anatomy_Gene','Gene_BiologicalProcess','Gene_Pathway']
})
order by score desc limit 100"
centrality<-call_neo4j(Tt,connect)
centrality
d<-'CALL db.schema.visualization YIELD nodes, relationships'
call_neo4j(d,connect)
centrality<-"call gds.degree.stream({
nodeProjection: 'Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene','Anatomy_Gene','Gene_BiologicalProcess','Gene_Pathway']
})
YIELD nodeId, score
return gds.util.asNode(nodeId).name AS name, score
order by score desc"
centrality<-call_neo4j(centrality,connect)
data<-cbind(centrality$name,centrality$score)
head(data)
bet<-"call gds.betweenness.stream({
nodeProjection: 'Hetionet_Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene', 'Anatomy_Gene', 'Gene_BiologicalProcess', 'Gene_Pathway', 'Compound_Disease']
})
YIELD nodeId, score
return gds.util.asNode(nodeId).name AS name, gds.util.asNode(nodeId).type AS nodeType ,score
order by score desc limit 100;"
between<-call_neo4j(bet,connect)
between
bet<-"call gds.betweenness.stream({
nodeProjection: 'Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene', 'Anatomy_Gene', 'Gene_BiologicalProcess', 'Gene_Pathway', 'Compound_Disease']
})
YIELD nodeId, score
return gds.util.asNode(nodeId).name AS name, gds.util.asNode(nodeId).type AS nodeType ,score
order by score desc limit 100;"
between<-call_neo4j(bet,connect)
between
bet<-"call gds.betweenness.stream({
nodeProjection: 'Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene', 'Anatomy_Gene', 'Gene_BiologicalProcess', 'Gene_Pathway']
})
YIELD nodeId, score
return gds.util.asNode(nodeId).name AS name, gds.util.asNode(nodeId).type AS nodeType ,score
order by score desc limit 100;"
between<-call_neo4j(bet,connect)
between
bet<-"call gds.betweenness.stream({
nodeProjection: 'Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene', 'Anatomy_Gene', 'Gene_BiologicalProcess', 'Gene_Pathway']
})
YIELD nodeId, score
return gds.util.asNode(nodeId).name AS name, gds.util.asNode(nodeId).type AS nodeType ,score
order by score desc limit 100;"
between<-call_neo4j(bet,connect)
between<-cbind(between$name,between$score)
between
close<-"call gds.alpha.closeness.stream({
nodeProjection: 'Hetionet_Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene', 'Anatomy_Gene', 'Gene_BiologicalProcess', 'Gene_Pathway', 'Compound_Disease']
})
YIELD nodeId, centrality
return gds.util.asNode(nodeId).name AS name, gds.util.asNode(nodeId).type AS nodeType, centrality
order by centrality desc limit 100"
closeness<-call_neo4j(close,connect)
closeness<-cbind(closeness$name,closeness$score)
closeness
close<-"call gds.alpha.closeness.stream({
nodeProjection: 'Hetionet_Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene', 'Anatomy_Gene', 'Gene_BiologicalProcess', 'Gene_Pathway']
})
YIELD nodeId, centrality
return gds.util.asNode(nodeId).name AS name, gds.util.asNode(nodeId).type AS nodeType, centrality
order by centrality desc limit 100"
closeness<-call_neo4j(close,connect)
closeness<-cbind(closeness$name,closeness$score)
closeness
close<-"call gds.alpha.closeness.stream({
nodeProjection: 'Hetionet_Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene', 'Anatomy_Gene', 'Gene_BiologicalProcess', 'Gene_Pathway']
})
YIELD nodeId, centrality
return gds.util.asNode(nodeId).name AS name, gds.util.asNode(nodeId).type AS nodeType, centrality
order by centrality desc limit 100"
closeness<-call_neo4j(close,connect)
closeness
close<-"call gds.alpha.closeness.stream({
nodeProjection: 'Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene', 'Anatomy_Gene', 'Gene_BiologicalProcess', 'Gene_Pathway']
})
YIELD nodeId, centrality
return gds.util.asNode(nodeId).name AS name, gds.util.asNode(nodeId).type AS nodeType, centrality
order by centrality desc limit 100"
closeness<-call_neo4j(close,connect)
closeness<-cbind(closeness$name,closeness$score)
closeness
close<-"call gds.alpha.closeness.stream({
nodeProjection: 'Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene', 'Anatomy_Gene', 'Gene_BiologicalProcess', 'Gene_Pathway']
})
YIELD nodeId, centrality
return gds.util.asNode(nodeId).name AS name, gds.util.asNode(nodeId).type AS nodeType, centrality
order by centrality desc limit 100"
closeness<-call_neo4j(close,connect)
closeness
clo<-cbind(closeness$name,closeness$score)
clo<-cbind(closeness$name,closeness$centrality)
clo
common<-'MATCH (n1:Disease)
MATCH (n2:Compound)
WHERE NOT (n2)--(n1)
RETURN n1.name, n2.name, gds.alpha.linkprediction.commonNeighbors(n1, n2) AS commonNeighbors_score
order by commonNeighbors_score desc
limit 100;'
common<-call_neo4j(common,connect)
common
common<-cbind(common$n1.name,common$n2.name,common$commonNeighbors_score)
common
close<-"call gds.alpha.closeness.stream({
nodeProjection: 'Nodes',
relationshipProjection: ['Disease_Gene', 'Disease_Anatomy', 'Compound_Gene', 'Anatomy_Gene', 'Gene_BiologicalProcess', 'Gene_Pathway']
})
YIELD nodeId, centrality
return gds.util.asNode(nodeId).name AS name, gds.util.asNode(nodeId).type AS nodeType, centrality;"
closeness<-call_neo4j(close,connect)
closeness<-cbind(closeness$name,closeness$centrality)
closeness
common2<-'MATCH (n1:Disease)
MATCH (n2:BiologicalProcess)
RETURN n1.name, n2.name, gds.alpha.linkprediction.commonNeighbors(n1, n2) AS commonNeighbors_score
order by commonNeighbors_score desc
limit 100;'
common2<-call_neo4j(common2,connect)
common2<-cbind(common2$n1.name,common2$n2.name,common2$commonNeighbors_score)
common2
common2<-'MATCH (n1:Disease)
MATCH (n2:BiologicalProcess)
RETURN n1.name, n2.name, gds.alpha.linkprediction.commonNeighbors(n1, n2) AS commonNeighbors_score
order by commonNeighbors_score desc;'
common2<-call_neo4j(common2,connect)
common2<-cbind(common2$n1.name,common2$n2.name,common2$commonNeighbors_score)
common3<-'MATCH (n1:Disease)
MATCH (n2:Compound)
WHERE NOT (n2)--(n1)
RETURN n1.name, n2.name, gds.alpha.linkprediction.adamicAdar(n1, n2) AS AdamicAdar_Score
order by AdamicAdar_Score desc
limit 100'
common3<-call_neo4j(common3,connect)
common3<-cbind(common3$n1.name,common3$n2.name,common3$commonNeighbors_score)
common3
common3<-cbind(common3$n1.name,common3$n2.name,common3$AdamicAdar_Score)
common3
common4<-'MATCH (n1:Disease)
MATCH (n2:Pathway)
RETURN n1.name, n2.name, gds.alpha.linkprediction.adamicAdar(n1, n2) AS AdamicAdar_Score
order by AdamicAdar_Score desc
limit 100'
common4<-call_neo4j(common4,connect)
common4<-cbind(common4$n1.name,common4$n2.name,common4$AdamicAdar_Score)
common4
jarc<-'with the Disease (hypothesized association)
match (g:Gene)--(:Disease)
with collect(g.name) as GenesAssociatedWithDisease
match (n1:Gene)--(n2:Pathway)
where n1.name in GenesAssociatedWithDisease
with n1, collect(id(n2)) as Pathway1, GenesAssociatedWithDisease
match (n3:Gene)--(n4:Pathway)
where not n3.name in GenesAssociatedWithDisease
with n1, Pathway1, n3, collect(id(n4)) as Pathway2
return n1.name, n3.name, gds.alpha.similarity.jaccard(Pathway1, Pathway2) as similarity
order by similarity desc;'
jarc<-call_neo4j(jarc,connect)
jarc
jarc<-'match (g:Gene)--(:Disease)
with collect(g.name) as GenesAssociatedWithDisease
match (n1:Gene)--(n2:Pathway)
where n1.name in GenesAssociatedWithDisease
with n1, collect(id(n2)) as Pathway1, GenesAssociatedWithDisease
match (n3:Gene)--(n4:Pathway)
where not n3.name in GenesAssociatedWithDisease
with n1, Pathway1, n3, collect(id(n4)) as Pathway2
return n1.name, n3.name, gds.alpha.similarity.jaccard(Pathway1, Pathway2) as similarity
order by similarity desc;'
jarc<-call_neo4j(jarc,connect)
jarc
jarc<-call_neo4j(jarc,connect)
jarc
jarc2<-cbind(jarc2$n1.name,jarc2$n3.name,jarc2$similarity)
jarc<-cbind(jarc$n1.name,jarc$n3.name,jarc$similarity)
head(jarc)
jarc2<-'match (g:Gene)--(:Disease)
with collect(g.name) as GenesAssociatedWithDisease
match (n1:Gene)--(n2:BiologicalProcess)
where n1.name in GenesAssociatedWithDisease
with n1, collect(id(n2)) as BiologicalProcess1, GenesAssociatedWithDisease
match (n3:Gene)--(n4:BiologicalProcess)
where not n3.name in GenesAssociatedWithDisease
with n1, BiologicalProcess1, n3, collect(id(n4)) as BiologicalProcess2
return n1.name, n3.name, gds.alpha.similarity.jaccard(BiologicalProcess1, BiologicalProcess2) as similarity
order by similarity desc;'
jarc2<-call_neo4j(jarc2,connect)
jarc2<-cbind(jarc2$n1.name,jarc2$n3.name,jarc2$similarity)
jarc2<-call_neo4j(jarc2,connect)
gc()
jarc2<-cbind(jarc2$n1.name,jarc2$n3.name,jarc2$similarity)
jarc2<-'match (g:Gene)--(:Disease)
with collect(g.name) as GenesAssociatedWithDisease
match (n1:Gene)--(n2:BiologicalProcess)
where n1.name in GenesAssociatedWithDisease
with n1, collect(id(n2)) as BiologicalProcess1, GenesAssociatedWithDisease
match (n3:Gene)--(n4:BiologicalProcess)
where not n3.name in GenesAssociatedWithDisease
with n1, BiologicalProcess1, n3, collect(id(n4)) as BiologicalProcess2
return n1.name, n3.name, gds.alpha.similarity.jaccard(BiologicalProcess1, BiologicalProcess2) as similarity
order by similarity desc;'
jarc2<-call_neo4j(jarc2,connect)
gc()
gc()
install.packages("rjson")
library("rjson")
json_file <- "C:/Users/Admin/Downloadscc.json"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
library("rjson")
json_file <- "C:/Users/Admin/Downloads/cc.json"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
library("rjson")
json_file <- "C:/Users/Admin/Downloads/cc2.json"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
library("rjson")
json_file <- "C:/Users/Admin/Downloads/cc2.json"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
fp <- file.path("C:/Users/Admin/Downloads/cc3.txt")
json_data <- fromJSON(file = fp)
View(json_data)
json_data[[3]]
json_data[[11]]
json_data[[85]]
json_data[[300]]
class(json_data)
data<-do.call(rbind.data.frame, json_data)
df <- data.frame(matrix(unlist(json_data), nrow=132, byrow=TRUE),stringsAsFactors=FALSE)
df <- data.frame(matrix(unlist(json_data), nrow=3591, byrow=TRUE),stringsAsFactors=FALSE)
View(df)
df <- data.frame(matrix(unlist(json_data), nrow=3591, byrow=FALSE),stringsAsFactors=FALSE)
View(df)
library (plyr)
d <- ldply (json_data, data.frame)
View(d)
df <- data.frame(matrix(unlist(json_data), nrow=3591, byrow=FALSE),stringsAsFactors=FALSE)
View(df)
fp <- file.path("C:/Users/Admin/Downloads/cd.txt")
json_data <- fromJSON(file = fp)
data<-do.call(rbind.data.frame, json_data)
fp <- file.path("C:/Users/Admin/Downloads/cd.txt")
json_data <- fromJSON(file = fp)
fp <- file.path("C:/Users/Admin/Downloads/cc3.txt")
json_data <- fromJSON(file = fp)
data<-do.call(rbind.data.frame, json_data)
fp <- file.path("C:/Users/Admin/Downloads/cd.txt")
json_data <- fromJSON(file = fp)
d <- ldply (json_data, data.frame)
View(d)
fp <- file.path("C:/Users/Admin/Downloads/pizza.txt")
json_data <- fromJSON(file = fp)
d <- ldply (json_data, data.frame)
View(d)
fp <- file.path("C:/Users/Admin/Downloads/cc3.txt")
json_data <- fromJSON(file = fp)
data<-do.call(rbind.data.frame, json_data)
df <- data.frame(matrix(unlist(json_data), nrow=3591, byrow=FALSE),stringsAsFactors=FALSE)
library (plyr)
d <- ldply (json_data, data.frame)
View(d)
View(d)
fp <- file.path("C:/Users/Admin/Downloads/part.txt")
json_data <- fromJSON(file = fp)
data<-do.call(rbind.data.frame, json_data)
d <- ldply (json_data, data.frame)
View(d)
shiny::runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp()
runApp()
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
runApp('App/Nutrient_Calculator-master')
setwd("C:/Users/Admin/Documents/KM - Winter 2022/tutorial/B00867154/Data")
library(dplyr)
communities<-read.csv("communities.csv") %>%
group_by(communityId) %>%
tally()
communities2<-communities %>%
filter(n>10)
ggplot(communities2, aes(x = n))+
geom_density()+
theme(axis.title = element_blank())+
theme_classic()+
labs(
title = "<b style = 'color:#1381B0;  font-size:34px';>Frequency of the community membership</b><br>
<span style = 'font-size:120pt'>A total of 3345 communities were identified..</span>",
x = "Number of community members",
y = "Density"
)+
theme(
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0)
),
axis.title.x = element_textbox_simple(
width = NULL
),
axis.title.y = element_textbox_simple(
hjust = 0,
orientation = "left-rotated",
minwidth = unit(1, "in"),
maxwidth = unit(2, "in"),
padding = margin(4, 4, 2, 4),
margin = margin(0, 0, 2, 0)
))
library(ggplot2)
ggplot(communities2, aes(x = n))+
geom_density()+
theme(axis.title = element_blank())+
theme_classic()+
labs(
title = "<b style = 'color:#1381B0;  font-size:34px';>Frequency of the community membership</b><br>
<span style = 'font-size:120pt'>A total of 3345 communities were identified..</span>",
x = "Number of community members",
y = "Density"
)+
theme(
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0)
),
axis.title.x = element_textbox_simple(
width = NULL
),
axis.title.y = element_textbox_simple(
hjust = 0,
orientation = "left-rotated",
minwidth = unit(1, "in"),
maxwidth = unit(2, "in"),
padding = margin(4, 4, 2, 4),
margin = margin(0, 0, 2, 0)
))
library(ggtext)
library(ggrepel)
ggplot(communities2, aes(x = n))+
geom_density()+
theme(axis.title = element_blank())+
theme_classic()+
labs(
title = "<b style = 'color:#1381B0;  font-size:34px';>Frequency of the community membership</b><br>
<span style = 'font-size:120pt'>A total of 3345 communities were identified..</span>",
x = "Number of community members",
y = "Density"
)+
theme(
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0)
),
axis.title.x = element_textbox_simple(
width = NULL
),
axis.title.y = element_textbox_simple(
hjust = 0,
orientation = "left-rotated",
minwidth = unit(1, "in"),
maxwidth = unit(2, "in"),
padding = margin(4, 4, 2, 4),
margin = margin(0, 0, 2, 0)
))
ggplot(communities2, aes(x = n))+
geom_density()+
theme(axis.title = element_blank())+
theme_classic()+
labs(
title = "<b style = 'color:#1381B0;  font-size:34px';>Frequency of the community membership</b><br>
<span style = 'font-size:20pt'>A total of 3345 communities were identified..</span>",
x = "Number of community members",
y = "Density"
)+
theme(
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0)
),
axis.title.x = element_textbox_simple(
width = NULL
),
axis.title.y = element_textbox_simple(
hjust = 0,
orientation = "left-rotated",
minwidth = unit(1, "in"),
maxwidth = unit(2, "in"),
padding = margin(4, 4, 2, 4),
margin = margin(0, 0, 2, 0)
))
ggplot(communities2, aes(x = n))+
geom_density()+
theme(axis.title = element_blank())+
theme_classic()+
labs(
title = "<b style = 'color:#1381B0;  font-size:34px';>Frequency of the community membership</b><br>
<span style = 'font-size:12pt'>A total of 3345 communities were identified..</span>",
x = "Number of community members",
y = "Density"
)+
theme(
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0)
),
axis.title.x = element_textbox_simple(
width = NULL
),
axis.title.y = element_textbox_simple(
hjust = 0,
orientation = "left-rotated",
minwidth = unit(1, "in"),
maxwidth = unit(2, "in"),
padding = margin(4, 4, 2, 4),
margin = margin(0, 0, 2, 0)
))
ggplot(communities2, aes(x = n))+
geom_density()+
theme(axis.title = element_blank())+
theme_classic()+
labs(
title = "<b style = 'color:#1381B0;  font-size:3px';>Frequency of the community membership</b><br>
<span style = 'font-size:12pt'>A total of 3345 communities were identified..</span>",
x = "Number of community members",
y = "Density"
)+
theme(
plot.title.position = "plot",
plot.title = element_textbox_simple(
size = 13,
lineheight = 1,
padding = margin(5.5, 5.5, 5.5, 5.5),
margin = margin(0, 0, 5.5, 0)
),
axis.title.x = element_textbox_simple(
width = NULL
),
axis.title.y = element_textbox_simple(
hjust = 0,
orientation = "left-rotated",
minwidth = unit(1, "in"),
maxwidth = unit(2, "in"),
padding = margin(4, 4, 2, 4),
margin = margin(0, 0, 2, 0)
))
